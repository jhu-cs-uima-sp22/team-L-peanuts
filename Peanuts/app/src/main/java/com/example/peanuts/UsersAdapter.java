package com.example.peanuts;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.CheckBox;import android.widget.Filter;import android.widget.Filterable;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.recyclerview.widget.RecyclerView;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class UsersAdapter extends RecyclerView.Adapter<UsersAdapter.ViewHolder> implements Filterable {    private final List<NewAccount.User> fullUsers = new ArrayList<>();    private List<NewAccount.User> users;    private final Map<String, List<String>> groupRestrictions = new HashMap<>();    private final List<NewAccount.User> members = new ArrayList<>();    UsersAdapter(Context ctx, List<NewAccount.User> users, String uuid) {        this.users = users;        fullUsers.addAll(users);    }    private final View.OnClickListener onClickListener = (view) -> {        NewAccount.User it = (NewAccount.User) view.getTag();        CheckBox checkBox = view.findViewById(R.id.user_checkbox);        boolean isChecked = checkBox.isChecked();        if (isChecked) {            add(it);            checkBox.setChecked(true);        } else {            remove(it);            checkBox.setChecked(false); }    };    public void add(NewAccount.User user) {        if (!members.contains(user)) {            members.add(user);        }    }    public void remove(NewAccount.User user) {        if (members.contains(user)) {            members.remove(user);        }    }    public void updateRestrictions() {        for (NewAccount.User user : members) {            if (user.restrictions != null) {                for (String item : user.getRestrictions()) {                    if (groupRestrictions.get(item) == null) groupRestrictions.put(item, new ArrayList<>());                    groupRestrictions.get(item).add(user.getName());                }            }        }    }    public List<NewAccount.User> getMembers() {        return members;    }    public Map<String, List<String>> getRestrictions() {        updateRestrictions();        return groupRestrictions;    }    @Override    public Filter getFilter() {        return new Filter() {            @Override            protected FilterResults performFiltering(CharSequence constraint) {                List<NewAccount.User> filteredList = new ArrayList<>();                if (constraint == null || constraint.length() == 0) {                    filteredList.addAll(fullUsers);                } else {                    String filterPattern = constraint.toString().toLowerCase().trim();                    for (NewAccount.User item : fullUsers) {                        if (item.getEmail().toLowerCase().contains(filterPattern)                                || item.getName().toLowerCase().contains(filterPattern)) {                            filteredList.add(item);                        }                    }                }                FilterResults results = new FilterResults();                results.values = filteredList;                return results;            }            @Override            protected void publishResults(final CharSequence constraint,                                          FilterResults results) {                users.clear();                users.addAll((ArrayList) results.values);                notifyDataSetChanged();            }            @Override            public boolean equals(@Nullable Object obj) {                return super.equals(obj);            }        };    }    @NonNull    @Override    public UsersAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext())                .inflate(R.layout.item_user, parent, false);        return new ViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull UsersAdapter.ViewHolder holder, int position) {        holder.userName.setText(users.get(position).getName());        holder.userEmail.setText(users.get(position).getEmail());        holder.itemView.setTag(users.get(position));        holder.itemView.setOnClickListener(onClickListener);        holder.checkBox.setTag(users.get(position));        holder.checkBox.setOnClickListener(onClickListener);        if (getMembers() != null && getMembers().contains(users.get(position))) {            holder.checkBox.setChecked(true);        } else {            holder.checkBox.setChecked(false);        }    }    @Override    public int getItemCount() {        return users.size();    }    public static class ViewHolder extends RecyclerView.ViewHolder {        final TextView userName;        final TextView userEmail;        final CheckBox checkBox;        ViewHolder(View view) {            super(view);            userName = (TextView) view.findViewById(R.id.user_name);            userEmail = (TextView) view.findViewById(R.id.user_email);            checkBox = (CheckBox) view.findViewById(R.id.user_checkbox);        }    }}